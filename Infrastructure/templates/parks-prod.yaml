apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: parks-dev
metadata:
  annotations:
    description: |-
      MongoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.

      NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-mongodb
    openshift.io/display-name: MongoDB
    openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/db_images/mongodb.html
    openshift.io/long-description: This template provides a standalone MongoDB server
      with a database created.  The database is stored on persistent storage.  The
      database name, username, and password are chosen via parameters when provisioning
      this service.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: database,mongodb
  name: parks-dev

objects:

- kind: Service
  apiVersion: v1
  metadata:
    name: "mongodb-internal"
    labels:
      name: "mongodb"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  spec:
    clusterIP: None
    ports:
      - name: mongodb
        port: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}

- apiVersion: v1
  kind: Service
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    labels:
      name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mongodb
      port: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    serviceName: "mongodb-internal"
    replicas: 3
    selector:
      matchLabels:
        name: ${DATABASE_SERVICE_NAME}
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
          - name: mongo-container
            image: "registry.access.redhat.com/rhscl/mongodb-34-rhel7:latest"
            ports:
              - containerPort: 27017
            args:
              - "run-mongod-replication"
            volumeMounts:
              - name: ${DATABASE_SERVICE_NAME}-data
                mountPath: "/var/lib/mongodb/data"
            env:
              - name: MONGODB_USER
                value: ${MONGODB_USER} 
              - name: MONGODB_PASSWORD
                value: ${MONGODB_PASSWORD}
              - name: MONGODB_ADMIN_PASSWORD
                value: ${MONGODB_ADMIN_PASSWORD}
              - name: MONGODB_DATABASE
                value: ${MONGODB_DATABASE}
              - name: MONGODB_REPLICA_NAME
                value: "rs0"
              - name: MONGODB_SERVICE_NAME
                value: "mongodb-internal"
              - name: MONGODB_KEYFILE_VALUE
                value: "12345678901234567890"
            readinessProbe:
              exec:
                command:
                  - stat
                  - /tmp/initialized
    volumeClaimTemplates:
      - metadata:
          name: ${DATABASE_SERVICE_NAME}-data
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          accessModes: [ ReadWriteOnce ]
          resources:
            requests:
              storage: "4Gi"  

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: mlbparks
  data:
    DB_HOST: ${DATABASE_SERVICE_NAME}
    DB_PORT: "27017"
    DB_USERNAME: ${MONGODB_USER}
    DB_PASSWORD: ${MONGODB_PASSWORD}
    DB_NAME: "parks"
    DB_REPLICASET: "rs0"
    APPNAME: "MLB Parks (Green)"

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: nationalparks
  data:
    DB_HOST: ${DATABASE_SERVICE_NAME}
    DB_PORT: "27017"
    DB_USERNAME: ${MONGODB_USER}
    DB_PASSWORD: ${MONGODB_PASSWORD}
    DB_NAME: "parks"
    DB_REPLICASET: "rs0"
    APPNAME: "National Parks (Green)"

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: parksmap
  data:
    APPNAME: "ParksMap (Green)"

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: mlbparks-green
    name: mlbparks-green
  spec:
    replicas: 1
    selector:
      app: mlbparks-green
      deploymentconfig: mlbparks-green
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          execNewPod:
            command:
              - curl
              - 'http://mlbparks-green:8080/ws/data/load/'
            containerName: mlbparks-green
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          app: mlbparks-green
          deploymentconfig: mlbparks-green
      spec:
        containers:
          - env:
              - name: APPNAME
                value: "MLB Parks (Green)"
            envFrom:
              - configMapRef:
                  name: mlbparks
            image: 'docker-registry.default.svc:5000/fd7f-parks-dev/mlbparks:0.0-0'
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                  - echo
                  - '"ok"'
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: mlbparks-green
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ws/healthz/
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []


- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: mlbparks-blue
    name: mlbparks-blue
  spec:
    replicas: 1
    selector:
      app: mlbparks-blue
      deploymentconfig: mlbparks-blue
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          execNewPod:
            command:
              - curl
              - 'http://mlbparks-blue:8080/ws/data/load/'
            containerName: mlbparks-blue
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          app: mlbparks-blue
          deploymentconfig: mlbparks-blue
      spec:
        containers:
          - env:
              - name: APPNAME
                value: "MLB Parks (Blue)"
            envFrom:
              - configMapRef:
                  name: mlbparks
            image: 'docker-registry.default.svc:5000/fd7f-parks-dev/mlbparks:0.0-0'
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                  - echo
                  - '"ok"'
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: mlbparks-blue
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ws/healthz/
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []


- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: nationalparks-blue
    name: nationalparks-blue
  spec:
    replicas: 1
    selector:
      app: nationalparks-blue
      deploymentconfig: nationalparks-blue
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          execNewPod:
            command:
              - curl
              - 'http://nationalparks-blue:8080/ws/data/load/'
            containerName: nationalparks-blue
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          app: nationalparks-blue
          deploymentconfig: nationalparks-blue
      spec:
        containers:
          - env:
              - name: APPNAME
                value: "National Parks (Blue)"
            envFrom:
              - configMapRef:
                  name: nationalparks
            image: 'docker-registry.default.svc:5000/fd7f-parks-dev/nationalparks:0.0-0'
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                  - echo
                  - '"ok"'
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: nationalparks-blue
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ws/healthz/
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []


- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: nationalparks-green
    name: nationalparks-green
  spec:
    replicas: 1
    selector:
      app: nationalparks-green
      deploymentconfig: nationalparks-green
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          execNewPod:
            command:
              - curl
              - 'http://nationalparks-green:8080/ws/data/load/'
            containerName: nationalparks-green
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          app: nationalparks-green
          deploymentconfig: nationalparks-green
      spec:
        containers:
          - env:
              - name: APPNAME
                value: "National Parks (Green)"
            envFrom:
              - configMapRef:
                  name: nationalparks
            image: 'docker-registry.default.svc:5000/fd7f-parks-dev/nationalparks:0.0-0'
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                  - echo
                  - '"ok"'
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: nationalparks-green
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ws/healthz/
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []


- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: parksmap-green
    name: parksmap-green
  spec:
    replicas: 1
    selector:
      app: parksmap-green
      deploymentconfig: parksmap-green
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          execNewPod:
            command:
              - curl
              - 'http://parksmap-green:8080/ws/backends/init'
            containerName: parksmap-green
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          app: parksmap-green
          deploymentconfig: parksmap-green
      spec:
        containers:
          - env:
              - name: APPNAME
                value: "ParksMap (Green)"
            image: 'docker-registry.default.svc:5000/fd7f-parks-dev/parksmap:0.0-0'
            imagePullPolicy: IfNotPresent
            name: parksmap-green
            livenessProbe:
              exec:
                command:
                  - echo
                  - '"ok"'
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: parksmap-green
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ws/healthz/
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []



- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: parksmap-blue
    name: parksmap-blue
  spec:
    replicas: 1
    selector:
      app: parksmap-blue
      deploymentconfig: parksmap-blue
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          execNewPod:
            command:
              - curl
              - 'http://parksmap-blue:8080/ws/backends/init'
            containerName: parksmap-blue
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          app: parksmap-blue
          deploymentconfig: parksmap-blue
      spec:
        containers:
          - env:
              - name: APPNAME
                value: "ParksMap (Blue)"
            image: 'docker-registry.default.svc:5000/fd7f-parks-dev/parksmap:0.0-0'
            imagePullPolicy: IfNotPresent
            name: parksmap-blue
            livenessProbe:
              exec:
                command:
                  - echo
                  - '"ok"'
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            name: parksmap-blue
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ws/healthz/
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []


- apiVersion: v1
  kind: Service
  metadata:
    labels:
      type: parksmap-backend
    name: mlbparks-green
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: mlbparks-green
      deploymentconfig: mlbparks-green
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Service
  metadata:
    labels:
    name: mlbparks-blue
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: mlbparks-blue
      deploymentconfig: mlbparks-blue
    sessionAffinity: None
    type: ClusterIP


- apiVersion: v1
  kind: Service
  metadata:
    labels:
      type: parksmap-backend
    name: nationalparks-green
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: nationalparks-green
      deploymentconfig: nationalparks-green
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Service
  metadata:
    labels:
    name: nationalparks-blue
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: nationalparks-blue
      deploymentconfig: nationalparks-blue
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      type: parksmap
    name: parksmap-green
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: parksmap-green
      deploymentconfig: parksmap-green
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      type: parksmap
    name: parksmap-blue
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: parksmap-blue
      deploymentconfig: parksmap-blue
    sessionAffinity: None
    type: ClusterIP



- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      type: parksmap
    name: parksmap
  spec:
    to:
      kind: Service
      name: parksmap-green
      weight: 100
    wildcardPolicy: None



- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: edit
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
    - kind: ServiceAccount
      name: jenkins
      namespace: fd7f-jenkins

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: view
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: view
  subjects:
    - kind: ServiceAccount
      name: default

parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Connection Username
  name: MONGODB_USER
  value: mongodb
  required: true
- description: Password for the MongoDB connection user.
  displayName: MongoDB Connection Password
  name: MONGODB_PASSWORD
  value: mongodb
  required: true
- description: Name of the MongoDB database accessed.
  displayName: MongoDB Database Name
  name: MONGODB_DATABASE
  required: true
  value: parks
- description: Password for the database admin user.
  displayName: MongoDB Admin Password
  name: MONGODB_ADMIN_PASSWORD
  value: mongodb
  required: true
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).
  displayName: Version of MongoDB Image
  name: MONGODB_VERSION
  required: true
  value: "3.2"
